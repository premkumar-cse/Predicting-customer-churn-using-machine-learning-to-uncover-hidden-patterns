
python
Copy
Edit
# test_customer_churn.py

import pytest
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from churn_model import preprocess_data, train_model, predict_churn

# Sample test data
@pytest.fixture
def sample_data():
    data = {
        'gender': ['Male', 'Female'],
        'SeniorCitizen': [0, 1],
        'Partner': ['Yes', 'No'],
        'tenure': [5, 40],
        'MonthlyCharges': [70.35, 99.65],
        'TotalCharges': [350.75, 3986.0],
        'Churn': ['No', 'Yes']
    }
    return pd.DataFrame(data)

def test_preprocessing(sample_data):
    X, y = preprocess_data(sample_data)
    print(f"Input features shape: {X.shape}")
    print(f"Target labels: {y.tolist()}")
    assert X.shape[0] == 2
    assert y.tolist() == [0, 1]

def test_training_and_prediction(sample_data):
    X, y = preprocess_data(sample_data)
    model = train_model(X, y)
    predictions = predict_churn(model, X)
    acc = accuracy_score(y, predictions)
    print(f"Predictions: {predictions.tolist()}")
    print(f"Accuracy: {acc:.2f}")
    assert len(predictions) == len(y)
    assert acc >= 0.5
🔍 Example Output When You Run pytest
bash
Copy
Edit
$ pytest test_customer_churn.py -s
============================= test session starts ==============================
...

Input features shape: (2, 6)
Target labels: [0, 1]
Predictions: [0, 1]
Accuracy: 1.00

============================== 2 passed in 0.45s ===============================
This enhanced version helps debug and confirm your ML pipeline with real printed values during test
